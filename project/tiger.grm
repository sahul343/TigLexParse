(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%

%eop EOF (* What token to use as end of parsing token              *)
%verbose (* Generates a printed form of the table in expr.grm.desc *)
%pure


%name Expr (* The prefix to use on the name of LrValFun structure *)

(* The terminals or tokens of the language *)
%term CONST of int
    | PLUS    
    | MINUS
    | MUL
    | DIV
    | LT | EQ | LTEQ | GTEQ | GT  | AND | OR | NTEQ
    | NEWLINE
    | EOF
    | IF
    | ELSE
    | THEN
    | ASSIGN
    | LPAREN 
    | RPAREN
    | WHILE
    | DO
    | FOR
    | TO
    | IDENTIFIER of string
    

(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
       | EXPS    of Ast.Expr list
       | PROGRAM of Ast.Expr list

%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)

%left OR
%left AND
%nonassoc LT GT EQ NTEQ GTEQ LTEQ
%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL   DIV      (* higher than + and -            *)

(* The type that captures position in the input *)
%pos int

%%

PROGRAM : EXPS                 ( EXPS )
	| EXPS NEWLINE         ( EXPS )
    | EXPS EOF              (EXPS)

EXPS    : (* empty *)          ( []                  )
	| EXP EXPS     ( EXP :: EXPS         )

EXP     : CONST                ( Ast.Const CONST     )
	| IDENTIFIER 	       ( Ast.Var   IDENTIFIER)
	| EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
    	| EXP DIV EXP          (Ast.divide  EXP1 EXP2)
        | EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
	| EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	| EXP EQ EXP          (Ast.equal  EXP1 EXP2)
	| EXP NTEQ EXP          (Ast.notequal  EXP1 EXP2)
	| EXP LTEQ EXP          (Ast.lessequal  EXP1 EXP2)
	| EXP LT EXP          (Ast.less  EXP1 EXP2)
	| EXP GTEQ EXP          (Ast.greatequal  EXP1 EXP2)
	| EXP GT EXP          (Ast.great  EXP1 EXP2)
	| EXP AND EXP          (Ast.logicaland  EXP1 EXP2)
	| EXP OR EXP          (Ast.or  EXP1 EXP2)
	| IDENTIFIER ASSIGN EXP (Ast.assign (Ast.Var IDENTIFIER) EXP)
	| IF		       (Ast.IF)
	| LPAREN EXP RPAREN  	(EXP)
	| WHILE EXP DO EXP     (Ast.While EXP1 EXP2)
	| FOR IDENTIFIER ASSIGN EXP TO EXP DO EXP (Ast.For (Ast.Var IDENTIFIER) EXP1 EXP2 EXP3)
	| IF EXP THEN EXP ELSE EXP (Ast.Closedif EXP1 EXP2 EXP3)
	| IF EXP THEN EXP  	(Ast.Openif EXP1 EXP2 )
