(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%

%eop EOF (* What token to use as end of parsing token              *)
%verbose (* Generates a printed form of the table in Tiger.grm.desc *)
%pure


%name Tiger (* The prefix to use on the name of LrValFun structure *)

(* The terminals or tokens of the language *)
%term CONST of int
    | PLUS    
    | MINUS
    | MUL
    | DIV
    | LT | EQ | LTEQ | GTEQ | GT  | AND | OR | NTEQ
    | NEWLINE
    | EOF
    | IF
    | ELSE
    | THEN
    | ASSIGN
    | LPAREN 
    | RPAREN
    | WHILE
    | DO
    | FOR
    | TO
    | BREAK
    | IDENTIFIER of string
    | SEMICOLON
    | LET
    | IN
    | END
    | VAR
    | UMINUS
    | LBRACK
    | RBRACK
    | DOT
    | NIL
    | OF
    | COMMA
    | LBRACE
    | RBRACE
    | NEW

(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
       | EXPS    of Ast.Expr list
       | PROGRAM of Ast.Expr 
       | DECS	 of Ast.Dec list	
       | DEC	 of Ast.Dec
       | LVALUE  of Ast.Expr
       | Record  of Ast.Expr
       | RECBODY of (string * Ast.Expr) list
       | RECBODYTAIL of (string * Ast.Expr) list
       | ARGUMENTS of Ast.Expr list
       | ARGTAIL of Ast.Expr list
       | EXPTAIL of Ast.Expr list
%noshift EOF


%start PROGRAM
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)
%nonassoc ASSIGN
%nonassoc IDENTIFIER
%nonassoc DO FOR THEN  
%nonassoc ELSE 
%nonassoc OF LBRACK
%left OR
%left AND
%nonassoc LT GT EQ NTEQ GTEQ LTEQ
%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL   DIV      (* higher than + and -            *)
%left UMINUS
(* The type that captures position in the input *)
%pos int

%%

PROGRAM : EXP               ( EXP )

EXPS    : (* empty *)          ( []                  )	      
	| EXP EXPTAIL		(EXP :: EXPTAIL	   )
EXPTAIL	:(*empty*)		([]) 
        |SEMICOLON EXP EXPTAIL	(EXP::EXPTAIL)
	
EXP     : LVALUE  ASSIGN EXP %prec ASSIGN(Ast.Assign (LVALUE, EXP))
	| WHILE EXP DO EXP  (Ast.While EXP1 EXP2)
	| FOR IDENTIFIER ASSIGN EXP TO EXP DO EXP  %prec FOR(Ast.For IDENTIFIER EXP1 EXP2 EXP3)
	| IF EXP THEN EXP    	(Ast.Openif EXP1 EXP2 )
	| IF EXP THEN EXP ELSE EXP (Ast.Closedif  EXP1 EXP2 EXP3)
	| BREAK 		(Ast.BREAK	)
	| LET DECS IN EXPS END  (Ast.LET (DECS, EXPS) )
	| EXP EQ EXP          (Ast.equal  EXP1 EXP2)
	| EXP NTEQ EXP          (Ast.notequal  EXP1 EXP2)
	| EXP LTEQ EXP          (Ast.lessequal  EXP1 EXP2)
	| EXP LT EXP          (Ast.less  EXP1 EXP2)
	| EXP GTEQ EXP          (Ast.greatequal  EXP1 EXP2)
	| EXP GT EXP          (Ast.great  EXP1 EXP2)
	| EXP AND EXP          (Ast.logicaland  EXP1 EXP2)
	| EXP OR EXP          (Ast.or  EXP1 EXP2)
	| EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
    	| EXP DIV EXP          (Ast.divide  EXP1 EXP2)
    	| EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
	| EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	| CONST                ( Ast.Const CONST     )
	| LPAREN EXP RPAREN  	(EXP)
	|MINUS CONST     %prec UMINUS 	(Ast.NegConst  CONST   )
	| LVALUE		(LVALUE)
	| NIL 			(Ast.NIL)
	| IDENTIFIER LBRACK EXP RBRACK OF EXP %prec OF(Ast.Array(IDENTIFIER,EXP1,EXP2) )
	| IDENTIFIER LBRACE RECBODY RBRACE 	(Ast.Record (IDENTIFIER, RECBODY))
	| NEW IDENTIFIER			(Ast.Object IDENTIFIER)
	| IDENTIFIER LPAREN ARGUMENTS RPAREN 	(Ast.FunCall (IDENTIFIER,ARGUMENTS) )
	| LVALUE DOT IDENTIFIER LPAREN ARGUMENTS RPAREN    (Ast.MethodCall (LVALUE,IDENTIFIER,ARGUMENTS) )
ARGUMENTS: (*empty*)			([])
	 | EXP	ARGTAIL	(EXP::ARGTAIL)
ARGTAIL	 :			([])
	| COMMA EXP ARGTAIL	(EXP::ARGTAIL)
RECBODY : (*empty*)			([])
	 |IDENTIFIER EQ EXP RECBODYTAIL ((IDENTIFIER, EXP)::RECBODYTAIL)
RECBODYTAIL:(*empty*)				([])
	|COMMA IDENTIFIER EQ EXP RECBODYTAIL	((IDENTIFIER, EXP)::[])
DECS    :(*empty*)			([])
	|DEC DECS		(DEC :: DECS	)

DEC	: VAR IDENTIFIER ASSIGN EXP (Ast.VarDec(IDENTIFIER, EXP) )

LVALUE	: IDENTIFIER			(Ast.Name IDENTIFIER)
	|LVALUE DOT IDENTIFIER		(Ast.Method ( LVALUE, IDENTIFIER ))
	|LVALUE LBRACK EXP RBRACK (Ast.Access( LVALUE, EXP))
	|IDENTIFIER LBRACK EXP RBRACK (Ast.Access( (Ast.Name IDENTIFIER), EXP))


